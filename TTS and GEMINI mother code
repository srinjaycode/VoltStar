import requests
import os
import time
from google import genai
from IPython.display import Audio
import json

GEMINI_API_KEY = "AIzaSyDU8Tumt4Exey92UeL6OmMoz7ZZVXqhAPQ"  # Set this in your environment
ELEVEN_LABS_API_KEY = "sk_9c83348aa1907eac3425150be0f454e592053f74accb13bc" # Set this in your environment

if not GEMINI_API_KEY:
    raise ValueError("Google Gemini API key is missing.")
if not ELEVEN_LABS_API_KEY:
    raise ValueError("Eleven Labs API key is missing.")

# Google Gemini AI Setup
HEADERS = {"x-api-key": GEMINI_API_KEY}
genai_client = genai.Client(api_key=GEMINI_API_KEY)

# Initial sensor values


def whatwouldmaasay():
    """Generate an extremely aggressive, fast-talking, nagging AI mother response."""
    response = genai_client.models.generate_content(
        model="gemini-2.0-flash",
        contents=(
            f"You are an extremely angry and overprotective mother. You are furious, impatient, and always yelling. "
            f"You talk extremely fast, interrupt often, and demand immediate action. "
            f"You have a GPS and thermometer on your kid, which reads: "
            f"Position: {positioncurr}, Speed: {speedcurr}, Temperature: {tempcurr}. "
            f"previously it was Position: {positionprev}, Speed: {speedprev}, Temperature: {tempprev}. your previous instruction was {commandprev} if u feel ur son has not listened to your previous instruction write only: not good enough"
            f"Use this data to SCREAM and NAG in MAX 12 WORDS!"
        )
    )
    return response.text.strip()

def text_to_speech(text):
    """Convert text to speech using Eleven Labs API and play in Colab."""
    url = "https://api.elevenlabs.io/v1/text-to-speech/e32mynCa5wxYhGWUoxsr"  # Replace with actual voice ID
    headers = {
        "Content-Type": "application/json",
        "xi-api-key": ELEVEN_LABS_API_KEY,
    }
    data = {
        "text": text,
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.7
        }
    }

    response = requests.post(url, json=data, headers=headers)
    if response.status_code == 200:
        audio_path = "mom_voice.mp3"
        with open(audio_path, "wb") as f:
            f.write(response.content)
        print("Audio saved as mom_voice.mp3")
        return audio_path
    else:
        print("Error:", response.text)
        return None

def play_audio_colab(audio_path):
    """Play audio in Google Colab using IPython.display.Audio."""
    if audio_path:
        return Audio(audio_path, autoplay=True)
    else:
        print("No valid audio file to play.")
tase = False
# Execute main logic
while True:
  with open("data.json", "r") as file:
    data = json.load(file)
  currdata = data["list1"]
  prevdata = data["list2"]
  tempcurr = currdata[0]
  speedcurr = currdata[1]
  positioncurr = currdata[2]
  tempprev = prevdata[0]
  speedprev = prevdata[1]
  positionprev = prevdata[2]
  nagging_message = whatwouldmaasay()
  print("Generated Nagging:", nagging_message)
  audio_file = text_to_speech(nagging_message)
  play_audio_colab(audio_file)
  time.sleep(5)
  if nagging_message == "not good enough":
    data = {"tase": True} 

    with open("databack.json", "w") as file:
      json.dump(data, file)
    time.sleep(0.5)
    data = {"tase": False} 

    with open("databack.json", "w") as file:
      json.dump(data, file)


 



  commandprev = nagging_message
